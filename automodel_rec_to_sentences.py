# -*- coding: utf-8 -*-

import re
## 要去除的符号
pop_list = "，。；、？！,.;!?" #记得同步更改segment_text的和remove函数
def segment_text(text):
    """
    将文本按照标点符号分割成句子列表
    """
    #print("======")
    #print(text)
    #print("========")
    sentences = re.split(r'([，。；、？！,.;?!])', text)
    # print("------")
    # print(sentences)
    # print(len(sentences))
    # print("------")
    sentences = [s for s in sentences if s.strip()]  # 去除空白元素
    #print("======")
    #print(sentences)
    #print("========")
    return sentences


def split_into_words(text):
    """
    将句子分割成单个汉字和单词，保留标点符号
    """
    words = remove_chinese_punctuation(text)
    # 正则表达式用于匹配英文单词、汉字和标点符号
    pattern = re.compile(r'[a-zA-Z]+|[\u4e00-\u9fa5]|[^\u4e00-\u9fa5a-zA-Z\s]')

    # 使用 findall 方法找到所有匹配的部分
    words = pattern.findall(text)
    #print(words)
    #words = remove_chinese_punctuation(words)

    return words


def match_timestamps_to_words(text, timestamps):
    """
    将时间戳分配给对应的单词
    """
    words = split_into_words(text)
    #print(words)
    matched = []
    ts_idx = 0

    for word in words:
        if word in pop_list:
            continue
        start, end = timestamps[ts_idx]
        matched.append([start, end])
        ts_idx += 1
    return matched
def calculate_length(texts):
    words = split_into_words(texts)
    """
    计算分割后单词和汉字的长度
    """
    length = 0
    for word in words:
        length += 1
    return length

def convert_format(input_data):
    results = []
    for item in input_data:
        key = item['key']
        text = item['text']
        timestamps = item['timestamp']

        sentences = segment_text(text)
        current_ts_idx = 0
        i=1
        #print(len(timestamps))
        for sentence in sentences:
            if sentence in pop_list:
                #print(sentence,i)
                i+=1
                continue

            ts_list = timestamps[current_ts_idx:current_ts_idx + len(sentence)]
            text_seg = ' '.join(sentence)
            #print("======")
            #print(timestamps)
            #print("======")
            #break
            start = ts_list[0][0]
            end = ts_list[-1][1]
            matched_ts_list = match_timestamps_to_words(sentence, ts_list)

            result_item = {
                'text': sentence,
                'start': start,
                'end': end,
                'text_seg': text_seg,
                'ts_list': matched_ts_list
            }


            results.append(result_item)
            current_ts_idx += calculate_length(sentence)

    return results

# 示例输入
input_data = [{'key': 'example',
               'text': '宫里青蛙和你一起玩考，你吃玩你好哦，还有五号哟哦，还有早上好，空白娃空蹦蹦空本了，晚上好，我要私密，我要死你，我要私密。晚安纳尼南尼nony.什么叫我逗猫的？就的真的妈a等等，哄到你红豆泥红豆尼真的吗？多喜天dustin birthday,为什么搜狗soga soga是这样，我的所能。So的是呢？所但是呢是的呢，喜奶奶洗的奶洗了奶，不知道王丹丹monday night,王奶奶没问题，爱你这样偶您一家欧尼伽哥哥，我也找哦，那张往哪走？姐姐哦，豆沙藕豆子哦，豆子爸爸，我看上，我看死啊，我告诉你妈妈。',
               'timestamp': [[780, 1020], [1080, 1320], [1460, 1700], [1760, 2265], [3390, 3630], [3650, 3710], [3710, 3850], [3850, 4070], [4070, 4345], [5240, 5420], [5420, 5540], [5540, 5700], [5700, 5995], [6870, 7010], [7010, 7305], [8830, 9070], [9190, 9430], [9650, 10285], [12080, 12280], [12280, 12440], [12440, 12865], [14100, 14260], [14260, 14400], [14400, 14765], [15590, 15770], [15770, 15930], [15930, 16265], [17590, 17830], [17990, 18230], [18450, 18905], [20680, 20920], [20960, 21200], [21300, 21635], [22870, 23110], [23150, 23390], [23430, 23825], [24650, 24850], [24850, 25010], [25010, 25315], [26500, 26740], [26800, 27040], [27160, 27400], [27540, 27985], [29620, 29740], [29740, 29900], [29900, 30060], [30060, 30325], [31430, 31630], [31630, 31750], [31750, 31890], [31890, 32215], [33190, 33430], [33430, 33705], [35600, 35840], [35920, 36345], [37680, 37920], [37920, 38160], [39250, 39845], [41490, 41730], [41770, 42095], [44140, 44320], [44320, 44520], [44520, 44760], [44800, 45040], [45060, 45565], [47120, 47360], [47380, 47845], [48690, 48870], [48870, 49090], [49090, 49250], [49250, 49565], [50380, 50580], [50580, 50815], [52140, 52380], [52500, 52740], [52780, 53145], [54590, 54810], [54810, 55010], [55010, 55415], [56610, 56810], [56810, 57030], [57030, 57270], [58140, 58320], [58320, 58420], [58420, 58785], [60380, 60620], [60740, 60980], [61140, 61505], [63220, 63995], [65390, 66095], [66760, 66940], [66940, 67040], [67040, 67345], [69950, 70190], [70250, 70490], [71820, 72640], [73140, 73880], [74240, 74480], [74480, 74580], [74580, 74935], [76300, 76540], [76640, 76880], [77020, 77260], [77320, 77825], [79170, 79410], [79510, 79630], [79630, 79770], [79770, 80065], [81020, 81220], [81220, 81380], [81380, 81500], [81500, 81865], [82590, 82790], [82790, 82890], [82890, 83225], [84700, 84940], [85280, 85520], [85680, 86225], [87540, 87780], [87820, 87920], [87920, 88255], [89100, 89320], [89320, 89540], [89540, 89875], [90630, 90810], [90810, 90970], [90970, 91275], [92940, 93180], [93360, 93600], [93880, 94425], [96050, 96590], [96590, 96925], [98140, 98380], [98400, 98620], [98620, 98895], [100280, 100460], [100460, 100620], [100620, 100985], [102770, 103010], [103030, 103270], [103430, 103650], [103650, 103975], [104970, 105170], [105170, 105330], [105330, 105490], [105490, 105845], [106970, 107150], [107150, 107390], [107430, 107855], [108860, 109080], [109080, 109385], [110900, 111140], [111320, 111560], [111780, 112265], [113650, 113850], [113850, 114090], [114130, 114465], [115520, 115720], [115720, 115940], [115940, 116275], [117070, 117310], [117330, 117570], [119130, 119370], [119550, 119790], [120070, 120525], [122390, 122550], [122550, 122790], [122830, 123245], [123990, 124150], [124150, 124390], [124410, 124745], [125760, 125980], [125980, 126220], [127810, 128050], [128270, 128510], [128750, 129205], [130670, 130890], [130890, 131090], [131090, 131250], [131250, 131575], [132200, 132360], [132360, 132600], [132600, 132700], [132700, 133025], [133760, 133940], [133940, 134180]]}]

def remove_chinese_punctuation(text):
    """
    测试移除文本中的中文标点符号：，。？！、
    """
    return re.split(r'([，。；、？！,.;?!])', text)
    ##如果碰到list_out_ofindex,可以打印一下看看是否有什么多余的符号。需要保证，time_stamp的长度==text长度

if __name__ == "__main__":

    output_data = convert_format(input_data)
    print(output_data)
